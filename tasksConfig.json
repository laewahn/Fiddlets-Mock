{
	"Task 1" : {
		"38" : {
			"currentLine" : "var regExpMetaCharacters = /* Replace this: */ /\\S/g /* with your regexp */;",
			"type" : "RegExp"
		},
		"39" : {
			"currentLine" : "var replacement = '\\\\$&';",
			"type" : "String"
		},
		"40" : {
			"unknownVariables" : {
				"string" : ["{", "}", "{{","}}", "}}}", "<%", "%>", "}%>", "|", "}|"]
			},
			"context" : "var string = <#undefined:string#>;\nvar regExpMetaCharacters = /* Replace this: */ /\\S/g /* with your regexp */;\nvar replacement = '\\\\$&';",
			"currentLine" : "var escaped = string.replace(regExpMetaCharacters, replacement);",
			"type" : "String.prototype.replace(regexp|substr, newSubStr|function[, flags])",
			"assignedTo" : "escaped",
			"calleeMember" : "string",
			"method" : "replace",
			"params" : ["regExpMetaCharacters", "replacement"]
		},
		"42" : {
			"unknownVariables" : {
				"string" : ["{", "}", "{{","}}", "}}}", "<%", "%>", "}%>", "|", "}|"]
			},
			"context" : "var regExpMetaCharacters = /* Replace this: */ /\\S/g /* with your regexp */;\nvar replacement = '\\\\$&';\nvar escaped = string.replace(regExpMetaCharacters, replacement);",
			"currentLine" : "return escaped;",
			"type" : "String"
		}		
	},

	"Task 2" : {
		"61" : {
			"currentLine" : "var htmlMetaCharacters = /* Replace this: */ /\\S/g /* with your regexp */;",
			"type" : "RegExp"
		},
		"64" : {
			"unknownVariables" : {
				"s" : ["!","\"","#","&","'",",","-",".","/","0","1","2","3","4","6","8","9",";","<",">","?","@","A","B","C","D","E","F","G","H","I","J","M","N","O","P","S","T","U","W","X","\\","_","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","y","z","{","}"]
			},
			"context" : "var entityMap = {\n\t'&': '&amp;',\n\t'<': '&lt;',\n\t'>': '&gt;',\n\t'\"': '&quot;',\n\t\"'\": '&#39;',\n\t'/': '&#x2F;'\n};",
			"currentLine" : "return entityMap[s];"
		},
		"67" : {
			"unknownVariables" : {
				"string" : ["#Blue","#Green","&quot; \"'<>/","'","0","00","1","10000","2","200","3","4","40","6000","819606","@florrts","A Book","A Comedy of Errors","And it worked the second time.","Avoids methods","Bear > Shark","Bruno","Chris","Colors","Elise","Fair enough, right?","Flor","Fourth time also fine!.","Goodbye","Hello","In Stock","It worked the first time.","Jamie Walsh","Joe","John Power","Jon","Jonas","Miquel","NaN","Squid","Tater","That is all!","Then, surprisingly, it worked the third time.","USD","Welcome","World","X","\\abc","a","aa","b","bar","blue","c","desc","emptyArray","emptyString","false","foo","foooooooooooooo","grand_parent1","green","hello","in Object.prototype","janl","listitem1","listitem2","name","null","one of its attributes is a list","orange","parent1","parent1-child1","parent1-child2","parent2","parent2-child1","parent2-child2","red","t1","t2","this is an object","true","undefined","world","yo","zero","{{win}}"]
			},
			"context" : "var string = <#undefined:string#>;\nvar htmlMetaCharacters = /* Replace this: */ /\\S/g /* with your regexp */;\nfunction fromEntityMap (s) {\n\tvar entityMap = {\n\t\t'&': '&amp;',\n\t\t'<': '&lt;',\n\t\t'>': '&gt;',\n\t\t'\"': '&quot;',\n\t\t\"'\": '&#39;',\n\t\t'/': '&#x2F;'\n\t};\n\treturn entityMap[s];\n}",
			"currentLine" : "var escaped = String(string).replace(htmlMetaCharacters, fromEntityMap);",
			"type" : "String.prototype.replace(regexp|substr, newSubStr|function[, flags])",
			"assignedTo" : "escaped",
			"calleeMember" : "string",
			"method" : "replace",
			"params" : ["htmlMetaCharacters", "fromEntityMap"]
		},
		"69" : {

		}
	},

	"Task 3" : {
		"130" : {
			"unknownVariables" : {
				"tagsToCompile" : ["<% %>","<%","@   @","@ @","[ ]","{{ }}","| |","‹ ›"]
			},
			"context" : "var tagsToCompile = <#undefined:tagsToCompile#>;\nvar spaceRe = /\\s+/;",
			"currentLine" : "tagsToCompile = tagsToCompile.split(spaceRe, 1);",
			"type" : "String.prototype.split(...)",
			"assignedTo" : "tagsToCompile",
			"calleeMember" : "tagsToCompile",
			"method" : "split",
			"params" : ["spaceRe", 1]
		},
		"135" : {
			"unknownVariables" : {
				"tagsToCompile" : ["<% %>","<%","@   @","@ @","[ ]","{{ }}","| |","‹ ›"]
			},
			"context" : "var tagsToCompile = <#undefined:tagsToCompile#>\nvar openingTagRe, closingTagRe, closingCurlyRe;\nfunction escapeRegExp (string) {\n\treturn string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n}\nif (typeof tagsToCompile === 'string')\n\ttagsToCompile = tagsToCompile.split(spaceRe, 1);\nif (!isArray(tagsToCompile))\n\tthrow new Error('Invalid tags: ' + tagsToCompile);",
			"currentLine" : "openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');"
		},
		"136" : {
			"unknownVariables" : {
				"tagsToCompile" : ["<% %>","<%","@   @","@ @","[ ]","{{ }}","| |","‹ ›"]
			},
			"context" : "var tagsToCompile = <#undefined:tagsToCompile#>\nvar openingTagRe, closingTagRe, closingCurlyRe;\nfunction escapeRegExp (string) {\n\treturn string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n}\nif (typeof tagsToCompile === 'string')\n\ttagsToCompile = tagsToCompile.split(spaceRe, 1);\nif (!isArray(tagsToCompile))\n\tthrow new Error('Invalid tags: ' + tagsToCompile);",
			"currentLine" : "closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));"
		},
		"137" : {
			"unknownVariables" : {
				"tagsToCompile" : ["<% %>","<%","@   @","@ @","[ ]","{{ }}","| |","‹ ›"]
			},
			"context" : "var tagsToCompile = <#undefined:tagsToCompile#>\nvar openingTagRe, closingTagRe, closingCurlyRe;\nfunction escapeRegExp (string) {\n\treturn string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n}\nif (typeof tagsToCompile === 'string')\n\ttagsToCompile = tagsToCompile.split(spaceRe, 1);\nif (!isArray(tagsToCompile))\n\tthrow new Error('Invalid tags: ' + tagsToCompile);",
			"currentLine" : "closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));"
		}
	},

	"Task 4" : {}
}